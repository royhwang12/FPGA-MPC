module primal_update #(
    parameter STATE_DIM = 12,             // Dimension of state vector (nx)
    parameter INPUT_DIM = 4,             // Dimension of input vector (nu)
    parameter HORIZON = 30,              // Maximum MPC horizon length (N)
    parameter DATA_WIDTH = 16,           // 16-bit fixed point
    parameter FRAC_BITS = 8,             // Number of fractional bits for fixed point
    parameter ADDR_WIDTH = 9            
)(
    input logic clk,                     // Clock
    input logic rst,                     // Reset
    input logic start,                   // Start signal
    
    // System matrices and precomputed values memory access
    output logic [ADDR_WIDTH-1:0] A_rdaddress,
    input logic [DATA_WIDTH-1:0] A_data_out,
    
    output logic [ADDR_WIDTH-1:0] B_rdaddress,
    input logic [DATA_WIDTH-1:0] B_data_out,
    
    output logic [ADDR_WIDTH-1:0] K_rdaddress,
    input logic [DATA_WIDTH-1:0] K_data_out,
    
    output logic [ADDR_WIDTH-1:0] C1_rdaddress,
    input logic [DATA_WIDTH-1:0] C1_data_out,
    
    output logic [ADDR_WIDTH-1:0] C2_rdaddress,
    input logic [DATA_WIDTH-1:0] C2_data_out,

    // Initial state
    input wire [DATA_WIDTH-1:0] x_init_flat [STATE_DIM],
    
    // Linear cost memory access
    output logic [ADDR_WIDTH-1:0] p_rdaddress,
    input logic [DATA_WIDTH-1:0] p_data_out,
    
    output logic [ADDR_WIDTH-1:0] r_rdaddress,
    input logic [DATA_WIDTH-1:0] r_data_out,
    
    output logic [ADDR_WIDTH-1:0] q_rdaddress,
    input logic [DATA_WIDTH-1:0] q_data_out,

    // Output trajectory memory access
    output logic [ADDR_WIDTH-1:0] x_wraddress,
    output logic [DATA_WIDTH-1:0] x_data_in,
    output logic x_wren,
    
    output logic [ADDR_WIDTH-1:0] u_wraddress,
    output logic [DATA_WIDTH-1:0] u_data_in,
    output logic u_wren,
    
    output logic [ADDR_WIDTH-1:0] d_wraddress,
    output logic [DATA_WIDTH-1:0] d_data_in,
    output logic d_wren,
    
    // Configuration
    input logic [31:0] active_horizon,  // Current horizon length to use

    output logic done,                   // Done signal
    
    // Missing output ports for p and d write enable
    output logic [ADDR_WIDTH-1:0] p_wraddress,
    output logic [DATA_WIDTH-1:0] p_data_in,
    output logic p_wren,

    output logic [ADDR_WIDTH-1:0] d_rdaddress,
    input logic [DATA_WIDTH-1:0] d_data_out
);


    // State machine states
    localparam IDLE = 3'd0;
    localparam INIT = 3'd1;              // Initialize variables
    localparam BACKWARD_PASS = 3'd2;     // Backward pass (Riccati recursion)
    localparam FORWARD_PASS = 3'd3;      // Forward pass (trajectory rollout)
    localparam DONE_STATE = 3'd4;

    // Substates for backward pass
    localparam BP_LOAD_VECTORS = 2'd0;   // Load r and p vectors
    localparam BP_COMPUTE_D = 2'd1;      // Compute d vector
    localparam BP_COMPUTE_P = 2'd2;      // Compute p vector
    localparam BP_STORE_RESULTS = 2'd3;  // Store results and move to next timestep

    // Substates for forward pass
    localparam FP_LOAD_MATRICES = 2'd0;  // Load matrices for current timestep
    localparam FP_COMPUTE_U = 2'd1;      // Compute control input u
    localparam FP_COMPUTE_X = 2'd2;      // Compute next state x
    localparam FP_STORE_RESULTS = 2'd3;  // Store results and move to next timestep

    // State and control variables
    logic [2:0] state;
    logic [1:0] substate;                // Substate for detailed control
    logic [31:0] k;                      // Step counter
    logic [31:0] i, j;                   // Generic loop counters
    logic [31:0] cycle_counter;          // Cycle counter for timing operations
    
    // Temporary storage for matrices and vectors
    logic [DATA_WIDTH-1:0] A_matrix [STATE_DIM][STATE_DIM];
    logic [DATA_WIDTH-1:0] B_matrix [STATE_DIM][INPUT_DIM];
    logic [DATA_WIDTH-1:0] K_matrix [INPUT_DIM][STATE_DIM];
    logic [DATA_WIDTH-1:0] C1_matrix [INPUT_DIM][INPUT_DIM];
    logic [DATA_WIDTH-1:0] C2_matrix [STATE_DIM][STATE_DIM];
    
    // Vectors for current timestep
    logic [DATA_WIDTH-1:0] r_vector [INPUT_DIM];
    logic [DATA_WIDTH-1:0] p_vector [STATE_DIM];
    logic [DATA_WIDTH-1:0] q_vector [STATE_DIM];
    logic [DATA_WIDTH-1:0] d_vector [INPUT_DIM];
    logic [DATA_WIDTH-1:0] next_p_vector [STATE_DIM];
    
    // Trajectory storage
    logic [DATA_WIDTH-1:0] x_trajectory [HORIZON][STATE_DIM];
    logic [DATA_WIDTH-1:0] u_trajectory [HORIZON-1][INPUT_DIM];
    
    // Computation variables
    logic [DATA_WIDTH-1:0] temp_sum;
    logic [DATA_WIDTH-1:0] Bp_vector [INPUT_DIM];  // B^T * p vector
    
    // Memory access control signals
    logic load_matrices_done;
    logic compute_done;
    logic store_done;
    
    // Temporary computation variables
    logic [DATA_WIDTH-1:0] temp_val;     // Temporary value for scalar computations
    
    // State machine implementation
    always_ff @(posedge clk or posedge rst) begin
        if (rst) begin
            // Reset state machine
            state <= IDLE;
            substate <= 0;
            done <= 0;
            k <= 0;
            i <= 0;
            j <= 0;
            cycle_counter <= 0;
            load_matrices_done <= 0;
            compute_done <= 0;
            store_done <= 0;
            
            // Reset memory addresses
            A_rdaddress <= 0;
            B_rdaddress <= 0;
            K_rdaddress <= 0;
            C1_rdaddress <= 0;
            C2_rdaddress <= 0;
            p_rdaddress <= 0;
            r_rdaddress <= 0;
            q_rdaddress <= 0;
            
            // Reset memory write signals
            x_wraddress <= 0;
            x_data_in <= 0;
            x_wren <= 0;
            
            u_wraddress <= 0;
            u_data_in <= 0;
            u_wren <= 0;
            
            d_wraddress <= 0;
            d_data_in <= 0;
            d_wren <= 0;

            temp_sum <= 0;
        end else begin
            // Default values for control signals
            x_wren <= 0;
            u_wren <= 0;
            d_wren <= 0;
            
            case (state)
                IDLE: begin
                    // Wait for start signal
                    if (start) begin
                        state <= INIT;
                        done <= 0;
                        cycle_counter <= 0;
                        i <= 0;
                        j <= 0;
                    end
                end
                // Additional states and transitions (INIT, BACKWARD_PASS, etc.) remain the same as your original code...
            endcase
        end
    end
endmodule

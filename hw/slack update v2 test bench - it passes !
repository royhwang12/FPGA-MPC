`timescale 1ps/1ps

module tb_slack_update_alex3;
  // override parameters for easy testing
  localparam int STATE_DIM   = 2;
  localparam int INPUT_DIM   = 2;
  localparam int HORIZON     = 3;
  localparam int DATA_WIDTH  = 16;
  localparam int ADDR_WIDTH  = 3;  // enough to index up to 6 entries

  // DUT signals
  logic                         clk;
  logic                         rst;
  logic                         start;
  logic [ADDR_WIDTH-1:0]        u_rdaddress, y_rdaddress;
  logic signed [DATA_WIDTH-1:0] u_data_out, y_data_out;
  logic [ADDR_WIDTH-1:0]        z_wraddress;
  logic signed [DATA_WIDTH-1:0] z_data_in;
  logic                         z_wren;
  logic [ADDR_WIDTH-1:0]        x_rdaddress, g_rdaddress;
  logic signed [DATA_WIDTH-1:0] x_data_out, g_data_out;
  logic [ADDR_WIDTH-1:0]        v_wraddress;
  logic signed [DATA_WIDTH-1:0] v_data_in;
  logic                         v_wren;
  logic signed [DATA_WIDTH-1:0] u_min   [INPUT_DIM];
  logic signed [DATA_WIDTH-1:0] u_max   [INPUT_DIM];
  logic signed [DATA_WIDTH-1:0] x_min   [STATE_DIM];
  logic signed [DATA_WIDTH-1:0] x_max   [STATE_DIM];
  logic [31:0]                  active_horizon;
  logic                         done;

  // memories to drive DUT and capture outputs
  logic signed [DATA_WIDTH-1:0] u_mem [0:INPUT_DIM*HORIZON-1];
  logic signed [DATA_WIDTH-1:0] y_mem [0:INPUT_DIM*HORIZON-1];
  logic signed [DATA_WIDTH-1:0] x_mem [0:STATE_DIM*HORIZON-1];
  logic signed [DATA_WIDTH-1:0] g_mem [0:STATE_DIM*HORIZON-1];
  logic signed [DATA_WIDTH-1:0] z_mem [0:INPUT_DIM*HORIZON-1];
  logic signed [DATA_WIDTH-1:0] v_mem [0:STATE_DIM*HORIZON-1];

  // expected values
  logic signed [DATA_WIDTH-1:0] expected_z [0:INPUT_DIM*(HORIZON-1)-1];
  logic signed [DATA_WIDTH-1:0] expected_v [0:STATE_DIM*HORIZON-1];

  // hook up DUT
  slack_update_alex3 #(
    .STATE_DIM(STATE_DIM),
    .INPUT_DIM(INPUT_DIM),
    .HORIZON(HORIZON),
    .DATA_WIDTH(DATA_WIDTH),
    .ADDR_WIDTH(ADDR_WIDTH)
  ) dut (
    .clk(clk),
    .rst(rst),
    .start(start),
    .u_rdaddress(u_rdaddress),
    .u_data_out(u_data_out),
    .y_rdaddress(y_rdaddress),
    .y_data_out(y_data_out),
    .z_wraddress(z_wraddress),
    .z_data_in(z_data_in),
    .z_wren(z_wren),
    .x_rdaddress(x_rdaddress),
    .x_data_out(x_data_out),
    .g_rdaddress(g_rdaddress),
    .g_data_out(g_data_out),
    .v_wraddress(v_wraddress),
    .v_data_in(v_data_in),
    .v_wren(v_wren),
    .u_min(u_min),
    .u_max(u_max),
    .x_min(x_min),
    .x_max(x_max),
    .active_horizon(active_horizon),
    .done(done)
  );

  // drive memories
  assign u_data_out = u_mem[u_rdaddress];
  assign y_data_out = y_mem[y_rdaddress];
  assign x_data_out = x_mem[x_rdaddress];
  assign g_data_out = g_mem[g_rdaddress];

  // capture DUT writes
  always_ff @(posedge clk) begin
    if (z_wren)
      z_mem[z_wraddress] <= z_data_in;
    if (v_wren)
      v_mem[v_wraddress] <= v_data_in;
  end

  // clock
  always #5 clk = ~clk;

  initial begin
    // initialize clock and reset
    clk = 0;
    rst = 1;
    start = 0;
    active_horizon = HORIZON;

    // fill in test data for u and y
    // u_mem: [2, -3, 5, 0]
    u_mem[0] =  16'sd2;  u_mem[1] = -16'sd3;
    u_mem[2] =  16'sd5;  u_mem[3] =  16'sd0;
    // y_mem: [1, 1, -2, 4]
    y_mem[0] =  16'sd1;  y_mem[1] =  16'sd1;
    y_mem[2] = -16'sd2;  y_mem[3] =  16'sd4;

    // u_min=[0, -1], u_max=[3, 2]
    u_min[0] = 16'sd0;  u_min[1] = -16'sd1;
    u_max[0] = 16'sd3;  u_max[1] =  16'sd2;

    // expected z = clip(u+y) =
    // k=0,i=0: 2+1=3?3 ; i=1: -3+1=-2?-1
    // k=1,i=0: 5+(-2)=3?3; i=1:0+4=4?2
    expected_z[0] = 16'sd3;
    expected_z[1] = -16'sd1;
    expected_z[2] = 16'sd3;
    expected_z[3] = 16'sd2;

    // fill x and g
    // x_mem: [0,5, -1,8, -3,2]
    x_mem[0] =  16'sd0;   x_mem[1] =  16'sd5;
    x_mem[2] = -16'sd1;   x_mem[3] =  16'sd8;
    x_mem[4] = -16'sd3;   x_mem[5] =  16'sd2;
    // g_mem: [1,-1, 0,3, -2,4]
    g_mem[0] =  16'sd1;   g_mem[1] = -16'sd1;
    g_mem[2] =  16'sd0;   g_mem[3] =  16'sd3;
    g_mem[4] = -16'sd2;   g_mem[5] =  16'sd4;

    // x_min=[-2,-3], x_max=[4,6]
    x_min[0] = -16'sd2;   x_min[1] = -16'sd3;
    x_max[0] =  16'sd4;   x_max[1] =  16'sd6;

    // expected v = clip(x+g):
    // k=0:0+1=1?1; 5+(-1)=4?4
    // k=1:-1+0=-1?-1; 8+3=11?6
    // k=2:-3+(-2)=-5?-2; 2+4=6?6
    expected_v[0] =  16'sd1;
    expected_v[1] =  16'sd4;
    expected_v[2] = -16'sd1;
    expected_v[3] =  16'sd6;
    expected_v[4] = -16'sd2;
    expected_v[5] =  16'sd6;

    // pulse reset, then start
    #10 rst = 0;
    #10 start = 1;
    #10 start = 0;

    // wait for completion
    wait(done);
    #10;

    // check results
    $display("\n--- Checking z outputs ---");
    foreach (z_mem[i]) begin
      $display("z[%0d] = %0d (expected %0d)%s",
               i, z_mem[i], expected_z[i],
               (z_mem[i] === expected_z[i]) ? "" : "  <-- MISMATCH");
    end

    $display("\n--- Checking v outputs ---");
    foreach (v_mem[i]) begin
      $display("v[%0d] = %0d (expected %0d)%s",
               i, v_mem[i], expected_v[i],
               (v_mem[i] === expected_v[i]) ? "" : "  <-- MISMATCH");
    end

    $finish;
  end
endmodule

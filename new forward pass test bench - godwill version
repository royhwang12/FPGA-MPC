// Testbench: flattened interface
`timescale 1ns/1ps

module forward_primal_update_seq_tb;
  parameter int STATE_DIM   = 12;
  parameter int CONTROL_DIM = 4;
  parameter int W           = 16;

  logic clk, reset, start, done;
  logic signed [W*STATE_DIM-1:0]        x_k_flat;
  logic signed [W*CONTROL_DIM-1:0]      d_k_flat;
  logic signed [W*CONTROL_DIM*STATE_DIM-1:0] Kinf_flat;
  logic signed [W*STATE_DIM*STATE_DIM-1:0]   A_mat_flat;
  logic signed [W*STATE_DIM*CONTROL_DIM-1:0] B_mat_flat;
  logic signed [W*CONTROL_DIM-1:0]      u_k_flat;
  logic signed [W*STATE_DIM-1:0]        x_next_flat;

  // Unpacked for easy init and checks
  logic signed [W-1:0] x_k     [STATE_DIM];
  logic signed [W-1:0] d_k     [CONTROL_DIM];
  logic signed [W-1:0] Kinf    [CONTROL_DIM][STATE_DIM];
  logic signed [W-1:0] A_mat   [STATE_DIM][STATE_DIM];
  logic signed [W-1:0] B_mat   [STATE_DIM][CONTROL_DIM];
  logic signed [W-1:0] u_k     [CONTROL_DIM];
  logic signed [W-1:0] x_next  [STATE_DIM];

  // Expected
  logic signed [W-1:0] exp_u     [CONTROL_DIM] = '{-16'sd1, -16'sd2, -16'sd3, -16'sd4};
  logic signed [W-1:0] exp_x_next[STATE_DIM]  = '{16'sd0,16'sd0,16'sd0,16'sd0,16'sd5,16'sd6,16'sd7,16'sd8,16'sd9,16'sd10,16'sd11,16'sd12};

  forward_primal_update_seq #(
    .STATE_DIM(STATE_DIM), .CONTROL_DIM(CONTROL_DIM), .W(W)
  ) dut (
    .clk(clk), .reset(reset), .start(start),
    .x_k_flat(x_k_flat), .d_k_flat(d_k_flat),
    .Kinf_flat(Kinf_flat), .A_mat_flat(A_mat_flat), .B_mat_flat(B_mat_flat),
    .u_k_flat(u_k_flat), .x_next_flat(x_next_flat),
    .done(done)
  );

  initial clk = 0; always #5 clk = ~clk;

  integer i, j;
  initial begin
    // Reset
    reset = 1; start = 0; #20; reset = 0;
    // Init unpacked
    for (i=0; i<STATE_DIM; i++) x_k[i]=i+1;
    for (i=0; i<CONTROL_DIM; i++) d_k[i]=i+1;
    for (i=0; i<CONTROL_DIM; i++) for (j=0; j<STATE_DIM; j++) Kinf[i][j]=0;
    for (i=0; i<STATE_DIM; i++) for (j=0; j<STATE_DIM; j++) A_mat[i][j]=(i==j);
    for (i=0; i<STATE_DIM; i++) for (j=0; j<CONTROL_DIM; j++) B_mat[i][j]=(i<CONTROL_DIM && i==j);
    // Flatten inputs
    for (i=0; i<STATE_DIM; i++) x_k_flat[i*W +: W] = x_k[i];
    for (i=0; i<CONTROL_DIM; i++) d_k_flat[i*W +: W] = d_k[i];
    for (i=0; i<CONTROL_DIM; i++) for (j=0; j<STATE_DIM; j++) Kinf_flat[(i*STATE_DIM+j)*W +: W] = Kinf[i][j];
    for (i=0; i<STATE_DIM; i++)  for (j=0; j<STATE_DIM; j++) A_mat_flat[(i*STATE_DIM+j)*W +: W] = A_mat[i][j];
    for (i=0; i<STATE_DIM; i++)  for (j=0; j<CONTROL_DIM; j++) B_mat_flat[(i*CONTROL_DIM+j)*W +: W] = B_mat[i][j];

    // Start
    #10 start = 1; #10 start = 0;
    wait(done);

    @(posedge clk);
    $write("x_next_flat =");
    for (int j = STATE_DIM-1; j >= 0; j--)
      $write(" %h", x_next_flat[j*W +: W]);
    $display("");
    // Unpack outputs
    for (i=0; i<CONTROL_DIM; i++) u_k[i] = u_k_flat[i*W +: W];
    for (i=0; i<STATE_DIM;   i++) x_next[i] = x_next_flat[i*W +: W];
    // Display
    $display("--- u_k vs exp ---"); for (i=0; i<CONTROL_DIM; i++) $display("u_k[%0d]=%0d (exp %0d)", i, u_k[i], exp_u[i]);
    $display("--- x_next vs exp ---"); for (i=0; i<STATE_DIM;   i++) $display("x_next[%0d]=%0d (exp %0d)", i, x_next[i], exp_x_next[i]);
    #20 $finish;
  end
endmodule
